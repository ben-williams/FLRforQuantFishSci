\documentclass[a4paper,english,10pt]{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{cite}
\usepackage{color} 
\usepackage{float}
\usepackage{longtable}
\usepackage[bottom]{footmisc}
\usepackage{url}
\usepackage{natbib}
\usepackage{authblk}
\usepackage[T1]{fontenc}
\usepackage[utf8x]{inputenc}
\usepackage{babel}
\usepackage{hyperref}
\usepackage{geometry}
\geometry{verbose,a4paper,tmargin=3cm,bmargin=2cm,lmargin=2cm,rmargin=3cm}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\hypersetup{
    colorlinks=true,       % false: boxed links; true: colored links
    linkcolor=blue,        % color of internal links
    citecolor=red,         % color of links to bibliography
    filecolor=blue,        % color of file links
    urlcolor=blue          % color of external links
}

% Define some handy formatting
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\pkg}[1]{{\texttt{#1}}}
\newcommand{\class}[1]{{\textit{#1}}}
\newcommand{\R}{{\normalfont\textsf{R }}{}}
\newcommand{\args}[1]{{\texttt{#1}}}

%----------------------------------------------------------------------------------

\begin{document}
%\SweaveOpts{concordance=TRUE}

\title{a4a stock assessment framework \\ DRAFT}

\author[1]{Ernesto Jardim}
\author[1]{Colin Millar}
\author[1]{Finlay Scott}
\affil[1]{European Commission, Joint Research Centre, IPSC / Maritime Affairs Unit, 21027 Ispra (VA), Italy}
\affil[*]{Corresponding author \href{mailto:ernesto.jardim@jrc.ec.europa.eu}{ernesto.jardim@jrc.ec.europa.eu}}

\maketitle
\tableofcontents
\newpage

\section{Running assessments}

In the \initiative{a4a} assessment model, the model structure is defined by submodels, which are the different parts of a statistical catch at age model that require structural assumptions.

There are 5 submodels in operation: a model for F-at-age, a model for the initial age structure, a model for recruitment, a (list) of model(s) for abundance indices catchability-at-age, and a list of models for the observation variance of catch-at-age and abundance indices. In practice, we fix the variance models and the initial age structure models, but in theory these can be changed.

The submodels form use linear models. This opens the possibility of using the linear modelling tools available in R: see for example the \href{http://cran.r-project.org/web/packages/mgcv/index.html}{mgcv} gam formulas, or factorial design formulas using \code{lm()}. In R's linear modelling language, a constant model is coded as $\sim 1$, while a slope over age would simply be $\sim age$. For example, we can write a traditional year/age separable F model like $\sim factor(age) + factor(year)$.

The 'language' of linear models has been developing within the statistical community for many years, and constitutes an elegant way of defining models without going through the complexity of mathematical representations. This approach makes it also easier to communicate among scientists 
  \begin{itemize}
  \item \href{http://rspa.royalsocietypublishing.org/content/283/1393/147.short}{1965 J. A. Nelder}, notation for randomized block design
  \item \href{http://www.jstor.org/stable/info/2346786}{1973 Wilkinson and Rodgers}, symbolic description for factorial designs
  \item \href{http://books.google.com/books?isbn=0412343908}{1990 Hastie and Tibshirani}, introduced notation for smoothers
  \item \href{http://books.google.com/books?isbn=041283040X}{1991 Chambers and Hastie}, further developed for use in S
  \end{itemize}

There are two basic types of assessments available in \initiative{a4a}: the management procedure fit and the full assessment fit. The management procedure fit does not compute estimates of covariances and is therefore quicker to execute, while the full assessment fit returns parameter estimates and their covariances at the expense of longer fitting time.

\subsection{Stock assessment model details}

The statistical catch at age model is based on the well known Baranov catch equation

\begin{equation*}
e^{\E{\log C}} = \frac{\mathbf{F}}{\mathbf{F}+M}\left(1 - e^{-\mathbf{F}-M}\right) \mathbf{R}e^{-\sum \mathbf{F} + M}
\end{equation*}

and the survival equation

\begin{equation*}
e^{\E{\log I}} = \mathbf{Q} \mathbf{R}e^{-\sum \mathbf{F} + M}
\end{equation*}

where 

\begin{equation*}
\Var{\log C_{ay}} = \mathbf{\sigma^2_{ay}} \qquad \Var{\log I_{ays}} = \mathbf{\tau^2_{ays}}
\end{equation*}

In these equations $M$ is natural mortality, $F$ fishing mortality, $R$ recruitment, $Q$ survey catchability and $C$ catch. All these variables are defined by age groups, although in the formula the indices were removed for better readability.
 
The quantities $\log{F}$, $\log{Q}$, $\log{R}$, $\log{observation\,variances}$ and $\log{ initial\,age\,structure}$ (in bold in the equations above), need to be given a form, which is done using linear models. Recruitment is a special case. It is modelled as a fixed variance random effect, using the hard coded models Ricker, Beverton Holt, smooth hockeystick or geometric mean, which can use linear models for their parameters $\log{a}$ or $\log{b}$, where relevant. As an alternative the $\log{R}$ submodel can use a linear model like the other submodels 

\subsection{Quick and dirty}

Here we show a simple example of using the assessment model using plaice in the North Sea. The default settings of the stock assessment model work reasonably well. It's an area of research that will improve with time. Note that because the survey index for plaice has missing values we get a warning saying that we assume these values are missing at random.

<<message=TRUE>>=
data(ple4)
data(ple4.indices)
fit <- sca(ple4, ple4.indices)
@

To inspect the stock assessment summary constituted of trends of fishing mortality (harvest), spawning stock biomass (SSB), catch and recruits, the user may add the \code{a4aFit} object to the original \code{FLStock} object using the \code{+} method and plot the result (Figure~\ref{fig:summ}).

<<summ, fig.cap="Stock summary for Plaice in ICES area IV, recruits, SSB (Stock Spawning Biomass), catch (catch and landings) and harvest (fishing mortality or F).">>=
stk <- ple4 + fit
plot(stk)
@

In more detail, one can plot a 3D representation of fishing mortality (Figure~\ref{fig:F}),

<<F, fig.cap="3D contour plot of estimated fishing mortality at age and year">>=
persp3D(z=harvest(fit)[drop=TRUE], x=as.numeric(dimnames(harvest(fit))[[1]]), y=as.numeric(dimnames(harvest(fit))[[2]]), expand = 0.9, space = 0.3, along = "xy", colkey = list(side=1, width = 0.9, length = 0.4, cex.axis = 0.8), box = TRUE, col.var=harvest(fit)[drop=TRUE], zlab="Fishing mortality", ylab="Year", xlab="Age")
@

population abundance (Figure~\ref{fig:N}) is displaid as a 3D ribbon, 

<<N, fig.cap="Population abundance by age and year">>=
ribbon3D( z = stock.n(fit)[drop=TRUE], x= as.numeric(dimnames(stock.n(fit))[[1]]), y= as.numeric(dimnames(stock.n(fit))[[2]]) , expand = 0.9, space = 0.1, along = "x", colkey = list( side=1, width = 0.9, length = 0.4, cex.axis = 0.8), main="Population Abundance" , box = TRUE, col.var=stock.n(fit)[drop=TRUE],   zlab="Stock Numbers", ylab="Year", xlab="Age")
@

as well as catch-at-age (Figure~\ref{fig:C}).

<<C, fig.cap="Catches in number of individuals by age and year">>=
ribbon3D( z = catch.n(fit)[drop=TRUE], x= as.numeric(dimnames(catch.n(fit))[[1]]), y= as.numeric(dimnames(catch.n(fit))[[2]]) , expand = 0.9, space = 0.3, along = "x", colkey = list( side=1, width = 0.9, length = 0.4, cex.axis = 0.8),box = TRUE, col.var=catch.n(fit)[drop=TRUE] , zlab="Catch at age (tons)", ylab="Year", xlab="Age")
@

\subsection{Diagnostics}

A set of plots to inspect the fit quality and assumptions are implemented. The most common is to look at standardized log-residuals to check for biased results or large variances. Note that the standardization should produce residuals with variance ~1, which means that most residual values should be between $\sim -2$ and $\sim 2$. These residuals also allow the user to check for deviances from the log-normal assumption.

The \code{residuals()} method will compute standardized residuals which can be plotted using a set of packed methods.

<<>>=
res <- residuals(fit, ple4, ple4.indices)
@

Figure~\ref{fig:res} shows a scatterplot of residuals by age and survey, with a smoother to guide (or mis-guide ...) your visual analysis.

<<res, fig.cap="Standardized residuals for abundance indices (SNS, BTS Tridens and BTS Isis) and for catch numbers (catch.n). Each panel is coded by age class, dots represent standardized residuals and lines a simple smoother.">>=
plot(res)
@

The common bubble plot by year and age for each survey are shown in Figure~\ref{fig:bub}. It shows the same information as Figure~\ref{fig:res} but in a multivariate perspective.

<<bub, fig.cap="Bubbles plot of standardized residuals for abundance indices (SNS, BTS Tridens and BTS Isis) and for catch numbers (catch.n).">>=
bubbles(res)
@

Figure~\ref{fig:qq} shows a quantile-quantile plot to assess how well do the residuals match the normal distribution.

<<qq, fig.cap="Quantile-quantile plot of standardized residuals for abundance indices (SNS, BTS Tridens and BTS Isis) and for catch numbers (catch.n). Each panel is coded by age class, dots represent standardized residuals and lines the normal distribution quantiles.">>=
qqmath(res)
@

To have a look at how well is the model predicting catches and abundance, one can use the \code{plot()} method with the \class{a4aFit} object and the \class{FLStock} (Figure~\ref{fig:selplt}) object or the \class{FLIndex} object (Figure~\ref{fig:idxplt}).

<<selplt, fig.cap="Predict and observed catch-at-age">>=
plot(fit, ple4)
@

<<idxplt, fig.cap="Predict and observed abundance-at-age">>=
plot(fit, ple4.indices)
@

%Finally a retrospective analysis can be carried out using the method \code{ra()}. Figure~\ref{fig:retro} shows the results for this assessment.

%<<retro, fig.cap="Retrospective analysis">>=
%retro <- ra(ple4, ple4.indices, 5)
%plot(retro)
%@

To get information about the likelihood fit the method \code{fitSumm()} will extract information about likelihood, number of parameters, etc, and the methods \code{AIC()} and \code{BIC()} will compute the information criteria.

<<>>=
fitSumm(fit)
AIC(fit)
BIC(fit)
@

\subsection{Data structures}

As mentioned above, the output of the stock assessment method may be simpler, with or without all the information about the parameters of the model like the variance-covariance matrix. In the first case the class of the output object is \class{a4aFitSA} while in the second case is \class{a4aFit}.

This section will describe the data structures of these classes and the classes that compose them.

Starting with the basic model output class, \class{a4aFit}, the slots of this class are shown on the code below and Figure~\ref{fig:a4aFit}.

<<>>=
showClass("a4aFit")
@

<<a4aFit, echo=FALSE, fig.cap="The a4aFit class">>=
plotS4("a4aFit", lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.3)
@

Fitted values are stored in the \code{stock.n}, \code{harvest}, \code{catch.n} and \code{index} slots. It also contains information carried over from the stock object used to fit the model, like the the name of the stock in \code{name}, any description provided in \code{desc} and the age and year range and mean F range in \code{range}. There is also a wall clock that has a breakdown of the time taken to run the model in \code{clock}.

The full assessment fit returns an object of class \class{a4aFitSA}, the slots of this class are shown on the code below and Figure~\ref{fig:a4aFitSA}.

<<>>=
showClass("a4aFitSA")
@

<<a4aFitSA, echo=FALSE, fig.cap="The a4aFitSA class">>=
plotS4("a4aFitSA", lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.3)
@

The additional slots in the assessment output are the \code{fitSumm} and \code{pars} slots, which are containers for model summaries and the model parameters. The \code{pars} slot is a class of type \class{SCAPars} (Figure~\ref{fig:SCAPars}) which is itself composed of sub-classes, designed to contain the information necessary to simulate from the model.

<<>>=
showClass("SCAPars")
showClass("a4aStkParams")
showClass("submodel")
@

<<SCAPars, echo=FALSE, fig.cap="The SCAPars class">>=
plotS4("SCAPars", lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.3)
@

The \class{SCAPars} is built using objects of class \class{a4aStkParams} (Figure~\ref{fig:a4aStkParams}) and \class{submodel} (Figure~\ref{fig:submod}). These classes have the following slots.

<<a4aStkParams, echo=FALSE, fig.cap="The a4aStkParams class">>=
plotS4("a4aStkParams", lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.3)
@

<<submod, echo=FALSE, fig.cap="The submodel class">>=
plotS4("submodel", lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.3)
@

For example, all the parameters required so simulate a time-series of mean F trends is contained in the \code{stkmodel} slot, which is a class of type \class{a4aStkParams}. This class contains the relevant submodels (see later), their parameters \code{params} and the joint covariance matrix \code{vcov} for all stock related parameters.

\subsection{The statistical catch-at-age stock assessment framework - the \code{sca} method}

The statistical catch at age (\code{sca()}) method used in the previous section with the default settings, can be parametrized to control other features of the stock assessment framework. The most interesting ones are the submodels for fishing mortality ($F$), catchability ($Q$) and recruitment ($R$). 

An important argument for \code{sca()} is the type of fit, which controls if a full assessment will be performed or a management procedure type of assessment. The argument is called \code{fit} and can have the values 'assessment' for a full assessemt or 'MP' for a simpler assessment. By default \code{sca()} uses \code{fit='MP'}. 

We'll start by looking at the submodel for $F$, then $Q$ and finally $R$.

Please note that each of these model \emph{forms} have not been tuned to the data. The degrees of freedom of each model can be better tuned to the data by using model selection procedures such as Akaike Information Criterion (AIC) or Bayesian Information Criterion (BIC), etc.

\subsubsection{Fishing mortality submodel}

We will now take a look at some examples for F models and the forms that we can get. We'll fix the $Q$ and $R$ submodels. 

Lets start with a separable model in which age and year effects are modelled as dummy variables, using the \code{factor} coding provided by R (Figure~\ref{fig:sep1}). 

<<>>=
qmod <- list(~ factor(age)) 
fmod <- ~ factor(age) + factor(year)
srmod <- ~ factor(year)
fit <- sca(stock = ple4, indices = ple4.indices[1], fmodel=fmod, qmodel=qmod, srmodel=srmod)
@

<<sep1, echo=FALSE, fig.cap="Fishing mortality separable model">>=
wireframe(data ~ age + year, data = as.data.frame(harvest(fit)), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

Next we may make things a bit more interesting by using an (unpenalised) thin plate spline, where we'll borrow the smoothing splines method (\code{s()}) provided by package \href{http://cran.r-project.org/web/packages/mgcv/}{\pkg{mgcv}}. We're using the North Sea Plaice data again, and since it has 10 ages we will use a simple rule of thumb that the spline should have fewer than $\frac{10}{2} = 5$ degrees of freedom, and so we opt for 4 degrees of freedom. We will also do the same for year and model the change in F through time as a smoother with 20 degrees of freedom. Note that this is still a separable model, it's a smoothed version of the previous model (Figure~\ref{fig:sep2}).

<<>>=
fmod <- ~ s(age, k=4) + s(year, k = 20)
fit1 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) # notice that you can specify the submodels without the argument, as an ex you don't need fmodel=fmod, but the order should be respected
@

<<sep2, echo=FALSE, fig.cap="Fishing mortality smoothed separable model">>=
wireframe(data ~ age + year, data = as.data.frame(harvest(fit1)), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

A non-separable model, where we consider age and year to interact can be modeled using a smooth interaction term in the F model using a tensor product of cubic splines with the \code{te} method (Figure~\ref{fig:te1}), again borrowed from \href{http://cran.r-project.org/web/packages/mgcv/index.html}{\pkg{mgcv}}. 

<<>>=
fmod <- ~ te(age, year, k = c(4,20))
fit3 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)
@

<<te1, echo=FALSE, fig.cap="Fishing mortality smoothed non-separable model">>=
wireframe(data ~ age + year, data = as.data.frame(harvest(fit3)), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

In the last examples the fishing mortalities (Fs') are linked across age and time.  What if we want to free up a specific age class because in the residuals we see a consistent pattern.  This can happen, for example, if the spatial distribution of juveniles is disconnected to the distribution of adults.  The fishery focuses on the adult fish, and therefore the the F on young fish is a function of the distribution of the juveniles and could deserve a specific model. This can be achieved by adding a component for the year effect on age 1 (Figure~\ref{fig:age1}).

<<>>=
fmod <- ~ te(age, year, k = c(4,20)) + s(year, k = 5, by = as.numeric(age==1))
fit4 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)
@

<<age1, echo=FALSE, fig.cap="Fishing mortality age-year interaction model with extra age 1 smoother.">>=
wireframe(data ~ age + year, data = as.data.frame(harvest(fit4)), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

\subsubsection{Catchability submodel}

The catchability submodel is set up the same way as the $F$ submodel and the tools available are the same. The only difference is that the submodel is set up as a list of formulas, where each formula relates with one abundance index.

We'll start by fixing the $F$ and $R$ models and compute the fraction of the year the index relates to, which will allow us to compute catchability at age and year. 

<<>>=
fmod <- ~ factor(age) + factor(year)
srmod <- ~ factor(year)
@

A first model is simply a dummy effect on age, which means that a coefficient will be estimated for each age. Note that this kind of model considers that levels of the factor are independent (Figure~\ref{fig:dummyage}).

<<>>=
qmod <- list(~ factor(age)) 
fit <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)
@

To compute the catchability estimated for each index we'll need to compute the abundance at the moment the index was carried out and divide the predicted index by the abundance. More precisely we'll compute abundance in the mid of the index period, which is stored in the \code{FLIndex} object, in the slot \code{range}, in fractions of the year. Later we'll see that we can use the method \code{predict()} to get the same result, but we'll need a \class{a4aFitSA} object to get the fitted parameters.

<<>>=
# compute N for the fraction of the year the survey is carried out
sfrac <- mean(range(ple4.indices[[1]])[c("startf", "endf")])
# fraction of total mortality up to that moment
Z <- (m(ple4) + harvest(fit))*sfrac
lst <- dimnames(fit@index[[1]])
# survivors
lst$x <- stock.n(fit)*exp(-Z)
stkn <- do.call("trim", lst)
qhat <- index(fit)[[1]]/stkn
@

<<dummyage, echo=FALSE, fig.cap="Catchability age independent model">>=
wireframe(data ~ age + year, data = as.data.frame(qhat), drape = TRUE, screen = list(x = -90, y=-45), zlab="q")
@

If one considers catchability at a specific age to be dependent on catchability on the other ages, similar to a selectivity modelling approach, one option is to use a smoother at age, and let the data 'speak' regarding the shape (Figure~\ref{fig:smoothage}).

<<>>=
qmod <- list(~ s(age, k=4))
fit <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)

# compute N for the fraction of the year the survey is carried out
Z <- (m(ple4) + harvest(fit))*sfrac
lst <- dimnames(fit@index[[1]])
lst$x <- stock.n(fit)*exp(-Z)
stkn <- do.call("trim", lst)
qhat <- index(fit)[[1]]/stkn
@

<<smoothage, echo=FALSE, fig.cap="Catchability smoother age model">>=
wireframe(data ~ age + year, data = as.data.frame(qhat), drape = TRUE, screen = list(x = -90, y=-45), zlab="q")
@

As in the case of $F$, one may consider catchability to be a process that evolves with age and year, including an interaction between the two effects. Such model can be modelled using the tensor product of cubic splines, the same way we did for the $F$ model (Figure~\ref{fig:te2}).

<<>>=
qmod <- list(~ te(age, year, k = c(3,40)))
fit <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)

# compute N for the fraction of the year the survey is carried out
Z <- (m(ple4) + harvest(fit))*sfrac
lst <- dimnames(fit@index[[1]])
lst$x <- stock.n(fit)*exp(-Z)
stkn <- do.call("trim", lst)
qhat <- index(fit)[[1]]/stkn
@

<<te2, echo=FALSE, fig.cap="Catchability tensor product of age and year">>=
wireframe(data ~ age + year, data = as.data.frame(qhat), drape = TRUE, screen = list(x = -90, y=-45), zlab="q")
@

Finally, one may want to investigate a trend in catchability with time, very common in indices built from CPUE data. In the example given here we'll use a linear trend in time, set up by a simple linear model (Figure~\ref{fig:qtrend}).

<<>>=
qmod <- list( ~ s(age, k=4) + year)
fit <- sca(ple4, ple4.indices[1], fmod, qmod, srmod)

# compute N for the fraction of the year the survey is carried out
Z <- (m(ple4) + harvest(fit))*sfrac
lst <- dimnames(fit@index[[1]])
lst$x <- stock.n(fit)*exp(-Z)
stkn <- do.call("trim", lst)
qhat <- index(fit)[[1]]/stkn
@

<<qtrend, echo=FALSE, fig.cap="Catchability with a linear trend in year">>=
wireframe(data ~ age + year, data = as.data.frame(qhat), drape = TRUE, screen = list(x = -90, y=-45), zlab="q")
@

\subsubsection{Catchability submodel for age aggregated indices}

The previous section was focused on age disaggregated indices, but age aggregated indices (CPUE, biomass, DEPM, etc) may also be used to tune the total biomass of the population. In these cases the \code{index}  slot of the class{FLIndex} is a vector and the age dimension must have one single element called "all". Note that in this case the qmodel should be set without age factors, although it can have a "year" component and covariates if needed.

<<>>=
# creating an index (note the name of the first dimension element)
dnms <- list(age="all", year=range(ple4)["minyear"]:range(ple4)["maxyear"])
bioidx <- FLIndex(FLQuant(NA, dimnames=dnms))
index(bioidx) <- stock(ple4)*0.001
index(bioidx) <- index(bioidx)*exp(rnorm(index(bioidx), sd=0.1))
range(bioidx)[c("startf","endf")] <- c(0,0)

# note the name of the first dimension element
index(bioidx)

# fitting the model
fit <- sca(ple4, FLIndices(bioidx), qmodel=list(~1))
@

The same methods that are applied to age disaggregated indices apply here, see standardized log residuals in Figure~\ref{fig:resbio}. It's also possible to mix several indices of both types.

<<resbio, fig.cap="Catchability residuals for a biomass index">>=
plot(residuals(fit, ple4, FLIndices(bioidx)))
@

\subsubsection{Catchability submodel for single age indices}

Similar to age aggregated indices one may have an index that relates only to one age, like a recruitment index. In this case the \class{FLIndex} object must have in the first dimension the age it referes to. The fit is then done relating the index with the proper age in numbers. Note that in this case the qmodel should be set without age factors, although it can have a "year" component and covariates if needed.

<<>>=
fit <- sca(ple4, FLIndices(ple4.index[1]), qmodel=list(~1))
@

As previously, the same methods apply, see standardized log residuals in Figure~\ref{fig:resrec}.

<<resrec, fig.cap="Catchability residuals for a single age index">>=
plot(residuals(fit, ple4, FLIndices(ple4.index[1])))
@

\subsubsection{Stock-recruitment submodel}

The S/R submodel is a special case, in the sense that it can be set up with the same linear tools as the $F$ and $Q$ models, but it can also use some hard coded models. The example shows how to set up a simple dummy model with \code{factor()}, a smooth model with \code{s()}, a Ricker model (\code{ricker()}), a Beverton and Holt model (\code{bevholt()}), a hockey stick model (\code{hockey()}), and a geometric mean model (\code{geomean()}). See Figure~\ref{fig:srmod} for results. As mentioned before, the 'structural' models have a fixed variance, which must be set by defining the coefficient of variation. We now fix the $F$ and $Q$ submodels before fiddling around with the S/R model.

<<>>=
fmod <- ~ s(age, k=4) + s(year, k = 20)
qmod <- list(~ s(age, k=4))
@

<<>>=
srmod <- ~ factor(year)
fit <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
srmod <- ~ s(year, k=20)
fit1 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
srmod <- ~ ricker(CV=0.1)
fit2 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
srmod <- ~ bevholt(CV=0.1)
fit3 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
srmod <- ~ hockey(CV=0.2)
fit4 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
srmod <- ~ geomean(CV=0.1)
fit5 <- sca(ple4, ple4.indices[1], fmod, qmod, srmod) 
flqs <- FLQuants(factor=stock.n(fit)[1], smother=stock.n(fit1)[1], ricker=stock.n(fit2)[1], bevertonHolt=stock.n(fit3)[1], hockeyStick=stock.n(fit4)[1], geometricMean=stock.n(fit5)[1])
@

<<srmod, fig.cap="Stock-recruitment models fits">>=
xyplot(data~year, groups=qname, data=flqs, type="l", auto.key=list(points=FALSE, lines=TRUE, columns=3))
@

\subsection{The major effects - age, year and cohort}

All submodels use the same type of specification process, the R formula interface, wich gives lot's of flexibility to explore models and combination of sub-models. As a reference one can consider three major effects that can be modelled the same way, the age affect, year effect and cohort effect. As examples note the following models, in these cases applied to fishing mortality, and all of them as a factor, which means one coefficient will be estimated for each level of the factor, meaning age, year or cohort repectively.

<<>>=
# the age effect
ageeffect <- ~ factor(age)

# the year effect
yeareffect <- ~ factor(year)

# the cohort 
cohorteffect <- ~ factor(year-age)

# the fits
fit1 <- sca(ple4, ple4.indices, fmodel=yeareffect)
fit2 <- sca(ple4, ple4.indices, fmodel=ageeffect)
fit3 <- sca(ple4, ple4.indices, fmodel=cohorteffect)
@

and the graphical representation of the three models in Figure~\ref{fig:majeff}

<<majeff, fig.cap="Examples of fishing mortality models for age, year and cohort.">>=
wireframe(data~year*age, data=harvest(fit1), main='year effect')
wireframe(data~year*age, data=harvest(fit2), main='age effect')
wireframe(data~year*age, data=harvest(fit3), main='cohort effect')
@

\subsection{The statistical catch-at-age stock assessment framework advanced features - the \code{a4aSCA} method}

A more advanced method for stock assessment can be used through the \code{a4aSCA()} method. This method gives access to the submodels for $N1$, $\sigma^2_{ay}$ and $I_{ays}$ as well as arguments to get the ADMB files, etc. Check the manual pages with \code{?a4aSCA} for more information. This method has 'assessment' as the default value for the \code{fit} argument, which means that the hessian is going to be computed and all the information about the parameters will be returned by default. Note that the default models of each submodel can be accessed with

<<>>=
fit <- a4aSCA(ple4, ple4.indices[1]) 
submodels(fit)
@

\subsubsection{N1 model}

The submodel for the stock number at age in the first year of the time series is set up with the usual linear tools (Figure~\ref{fig:ny1}), but bare in mind that the year effect does not make sense here.

<<>>=
n1mod <- ~s(age, k=4)
fit1 <- a4aSCA(ple4, ple4.indices[1], n1model=n1mod) 
flqs <- FLQuants(smo=stock.n(fit1)[,1], fac=stock.n(fit)[,1])
@

<<ny1, fig.cap="Nay=1 models">>=
xyplot(data~age, groups=qname, data=flqs, type="l", auto.key=list(points=FALSE, lines=TRUE, columns=2))
@

\subsubsection{Variance model}

The variance model allows the user to set up the shape of the observation variances $\sigma^2_{ay}$ and $I_{ays}$. This is an important subject related with fisheries data used for input to stock assessment models. It's quite common to have more precision on the most represented ages and less precision on the less frequent ages. This is due to the fact that the last ages do not appear as often at the auction markets, in the fishing operations or on survey samples.

By default the model assumes constant variance over time and ages (~ 1 model) but it can use other models specified by the user. As with the other submodels, R linear model capabilities are used (Figure~\ref{fig:varmod}).

<<>>=
vmod <- list(~1, ~1)
fit1 <- a4aSCA(ple4, ple4.indices[1], vmodel=vmod) 
vmod <- list(~ s(age, k=4), ~1)
fit2 <- a4aSCA(ple4, ple4.indices[1], vmodel=vmod) 
flqs <- FLQuants(cts=catch.n(fit1), smo=catch.n(fit2))
@

<<varmod, fig.cap="Population estimates using two different variance models">>=
xyplot(data~year|age, groups=qname, data=flqs, type="l", scales=list(y=list(relation="free")), auto.key=list(points=FALSE, lines=TRUE, columns=2))
@

\subsubsection{Working with covariates}

In linear model one can use covariates to explain part of the variance observed on the data that the 'core' model does not explain. The same can be done in the \initiative{a4a} framework. The example below uses the North Atlantic Oscillation (NAO) index to model recruitment. 

<<>>=
nao <- read.table("http://www.cdc.noaa.gov/data/correlation/nao.data", skip=1, nrow=62, na.strings="-99.90")
dnms <- list(quant="nao", year=1948:2009, unit="unique", season=1:12, area="unique")
nao <- FLQuant(unlist(nao[,-1]), dimnames=dnms, units="nao")
nao <- seasonMeans(trim(nao, year=dimnames(stock.n(ple4))$year))
nao <- as.numeric(nao)
@

First by simply assuming that the index drives recruitment (Figure~\ref{fig:naor}).

<<>>=
srmod <- ~ nao
fit2 <- sca(ple4, ple4.indices[1], qmodel=list(~s(age, k=4)), srmodel=srmod) 
flqs <- FLQuants(simple=stock.n(fit)[1], covar=stock.n(fit2)[1])
@

<<naor, echo=FALSE, fig.cap="Recruitment model with covariates">>=
xyplot(data~year, groups=qname, data=flqs, type="l", auto.key=list(points=FALSE, lines=TRUE, columns=2))
@

In a second model we're using the NAO index not to model recruitment directly but to model one of the parameters of the S/R function (Figure~\ref{fig:naor2}). 

<<>>=
srmod <- ~ ricker(a=~nao, CV=0.1)
fit3 <- sca(ple4, ple4.indices[1], qmodel=list(~s(age, k=4)), srmodel=srmod) 
flqs <- FLQuants(simple=stock.n(fit)[1], covar=stock.n(fit3)[1])
@

<<naor2, echo=FALSE, fig.cap="Recruitment model with covariates">>=
xyplot(data~year, groups=qname, data=flqs, type="l", auto.key=list(points=FALSE, lines=TRUE, columns=2))
@

Note that covariates can be added to any submodel using the linear model capabilities of R.

\subsubsection{Assessing \pkg{ADMB} files}

The framework gives access to the files produced to run the \pkg{ADMB} fitting routine through the argument \code{wkdir}. When set up all the \pkg{ADMB} files will be left in the directory. Note that the \pkg{ADMB} tpl file is distributed with the \pkg{FLa4a}. One can get it from your \pkg{R} library, under the folder \code{myRlib/FLa4a/admb/}.

<<>>=
fit1 <- a4aSCA(ple4, ple4.indices, wkdir="mytest") 
@

\subsection{Predict and simulate}

To predict and simulate \pkg{R} uses the methods \code{predict()} and \code{simulate()}, which were implemented in \pkg{FLa4a} in the same fashion.

<<>>=
fit <- sca(ple4, ple4.indices[1], fit="assessment") 
@

\subsubsection{Predict}

Predict simply computes the quantities of interest using the estimated coefficients and the design matrix of the model.

<<>>=
fit.pred <- predict(fit)
lapply(fit.pred, names)
@

\subsubsection{Simulate}

Simulate uses the variance-covariance matrix computed from the Hessian returned by \pkg{ADMB} and the fitted parameters, to parametrize a multivariate normal distribution. The simulations are carried out using the method \code{mvrnorm()} provided by the R package \href{http://cran.r-project.org/web/packages/MASS/}{\pkg{MASS}}. Figure~\ref{fig:sim} shows a comparison between the estimated values and the medians of the simulation, while Figure~\ref{fig:sim2} presents the stock summary of the simulated and fitted data.

<<>>=
fits <- simulate(fit, 100)
flqs <- FLQuants(sim=iterMedians(stock.n(fits)), det=stock.n(fit))
@

<<sim, echo=FALSE, fig.cap="Median simulations VS fit">>=
xyplot(data~year|age, groups=qname, data=flqs, type="l", scales=list(y=list(relation="free")))
@

<<sim2, echo=FALSE, fig.cap="Stock summary of the simulated and fitted data">>=
stks <- ple4 + fits
plot(stks)
@

\subsection{Geeky stuff}

A lot more can be done with the \initiative{a4a} framework. The next sections will describe methods that are more technical. What we'd categorize as 'matters for geeks', in the sense that these methods usually will require the users to 'dive' into \pkg{R} a bit more. 

<<>>=
fit <- sca(ple4, ple4.indices[1], fit="assessment") 
@

\subsubsection{External weigthing of likelihood components}

By default the likelihood components are weighted using inverse variance. However, the user may change the weights by setting the variance of the input parameters. This is done by adding a variance matrix to the \code{catch.n} and \code{index.n} slots of the stock and index objects. These variances will be used to penalize the data during the likelihood computation. The values should be given as coefficients of variation on the log scale, so that variance is $\log{({CV}^2 + 1)}$. Figure~\ref{fig:likwgt} shows the results of two fits with distinct likelihood weightings.

<<>>=
stk <- ple4
idx <- ple4.indices[1]
# variance of observed catches
varslt <- catch.n(stk)
varslt[] <- 0.4
catch.n(stk) <- FLQuantDistr(catch.n(stk), varslt)
# variance of observed indices
varslt <- index(idx[[1]])
varslt[] <- 0.1
index.var(idx[[1]]) <- varslt
# run
fit1 <- a4aSCA(stk, idx) 
flqs <- FLQuants(nowgt=stock.n(fit), extwgt=stock.n(fit1))
@

<<likwgt, echo=FALSE, fig.cap="Stock summary of distinct likelihood weightings">>=
xyplot(data~year|age, groups=qname, data=flqs, type="l", scales=list(y=list(relation="free")), auto.key=list(points=FALSE, lines=TRUE, columns=2))
@

\subsubsection{More models}

There's a set of methods that allow the user to have more flexibility on applying the models referred before. For example to break the time series in two periods, using the method \code{breakpts()}, or fixing some parts of the selection pattern by setting F to be the same for a group of ages, using \code{replace()}.

The example below (Figure~\ref{fig:rep}) replaces all ages above 5 by age 5, which means that a single coefficient is going to be estimated for age 5-10.

<<>>=
fmod <- ~ s(replace(age, age>5, 5), k=4) + s(year, k=20)
fit <- sca(ple4, ple4.indices, fmod)
@

<<rep, echo=FALSE, fig.cap="F-at-age fixed above age 5">>=
wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

Or else one can use a closed form fort the selection pattern. The example below uses a logistic form (Figure~\ref{fig:logistic}).

<<>>=
fmod <- ~ I(1/(1+exp(-age))) 
fit <- sca(ple4, ple4.indices, fmod)
@

<<logistic, echo=FALSE, fig.cap="F-at-age logistic">>=
wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

In the next case we'll use the \code{breakpts()} to split the time series at 1990, although keeping the same shape in both periods, a thin plate spline with 3 knots (Figure~\ref{fig:brk}).

<<>>=
fmod <- ~s(age, k = 3, by = breakpts(year, 1990))
fit <- sca(ple4, ple4.indices, fmod)
@

<<brk, echo=FALSE, fig.cap="F-at-age in two periods using in both cases a thin plate spline with 3 knots">>=
wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

More complicated models can be built with these tools. For example, Figure~\ref{fig:ageind} shows a model where the age effect is modelled as a smoother (the same thin plate spline) throughout years but independent from each other.

<<>>=
fmod <- ~ factor(age) + s(year, k=10, by = breakpts(age, c(2:8)))
fit <- sca(ple4, ple4.indices, fmod)
@

<<ageind, echo=FALSE, fig.cap="F-at-age as thin plate spline with 3 knots for each age">>=
wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

A quite complex model that implements a cohort effect can be set through the following formula. Figure~\ref{fig:coh} shows the resulting fishing mortality. Note that in this case we end up with a variable F pattern over time, but rather than using 4 * 10 = 40 parameters, it uses, 4 + 10 + 10 = 24.

<<>>=
fmodel <- ~ s(age, k = 4) + s(pmax(year - age, 1957), k = 10) + s(year, k = 10)
fit <- sca(ple4, ple4.indices, fmodel=fmodel) 
@

<<coh, echo=FALSE, fig.cap="F-at-age with a cohort effect.">>=
wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
@

\subsubsection{Propagate natural mortality uncertainty}

In this section we give an example of how uncertainty in natural mortality, set up using the \code{m()} method and the class \class{a4aM} (see Section~\ref{sec:natmort}), is propagated through the stock assessment. We'll start by fitting the default model to the data. 

<<>>=
data(ple4)
data(ple4.indices)
fit <- sca(ple4, ple4.indices)
@

Using the \initiative{a4a} methods we'll model natural mortality using a negative exponential model by age, Jensen's estimator for the level and a constant trend with time. We include multivariate normal uncertainty using the \code{mvrnorm()} method and create 25 iterations. 

<<>>=
nits <- 25

shape <- FLModelSim(model=~exp(-age-0.5))
level <- FLModelSim(model=~k^0.66*t^0.57, params = FLPar(k=0.4, t=10), vcov=matrix(c(0.002, 0.01,0.01, 1), ncol=2))
trend <- FLModelSim(model=~b, params=FLPar(b=0.5), vcov=matrix(0.02))

m4 <- a4aM(shape=shape, level=level, trend=trend)
m4 <- mvrnorm(nits, m4)
range(m4)[] <- range(ple4)[]
range(m4)[c("minmbar","maxmbar")]<-c(1,1)
flq <- m(m4)[]
quant(flq) <- "age"
stk <- propagate(ple4, nits)
m(stk) <- flq
@

We fit the same model to the new stock object which has uncertainty in the natural mortality.
The assessment is performed for each of the 25 iterations.

<<>>=
fit1 <- sca(stk, ple4.indices)
@

And compare the two results (Figure~\ref{fig:mprop}). It's quite easy to run these kind of tests and a large part of our effort is to create the tools to do so. 

<<mprop, echo=FALSE, fig.cap="Stock summary for two M models">>=
plot(FLStocks(munc=propagate(ple4, 25)+fit1, m02=ple4+fit))
@

%\subsubsection{Likelihood profiling - ToDo}

%<<>>=
%qk <- 3:8
%fk <- seq(10,50,5)
%liks <- expand.grid(qk=qk, fk=fk)
%liks$loglik <- NA
%for(i in 1:nrow(liks)){
%  ks <- liks[i,]
%	qmodel <- as.formula(substitute(~s(age, k=x) + year, list(x=ks$qk)))
%	fmodel <- as.formula(substitute(~s(age, k=4) + s(year, k=x), list(x=ks$fk)))
%	liks[i,3] <- as.numeric(AIC(sca(ple4, ple4.indices[1], qmodel=list(qmodel), fmodel=fmodel)))
%}
%@

\subsubsection{WCSAM exercise - replicating itself}

The World Conference on Stock Assessment Methods (\href{http://www.ices.dk/news-and-events/symposia/WCSAM-2013}{WCSAM}) promoted a workshop where a large simulation study was used to test the performance of distinct stock assessment models. The first criteria used was that the models should be able to reproduce itself. The process involved fitting the model, simulating observation error using the same model, and refitting the model to each iteration. The final results should be similar to the fitted results before observation error was added (see \href{http://icesjms.oxfordjournals.org/content/early/2014/01/18/icesjms.fst237.abstract}{Deroba, et.al, 2014} for details). The following analysis runs this analysis and Figure~\ref{fig:wcsam} presents the results.

<<>>=
# number of iters
nits <- 25
# fit the model
fit <- a4aSCA(ple4, ple4.indices[1]) 
# update the stock data
stk <- ple4 + fit
# simulate controlling the random seed
fits <- simulate(fit, nits, 1234)
# update stock and index data, now with iters
stks <- ple4 + fits 
idxs <- ple4.indices[1]
index(idxs[[1]]) <- index(fits)[[1]]
# run assessments on each iter
sfit <- a4aSCA(stks, idxs, fit="MP")
@

<<wcsam, echo=FALSE, fig.cap="Replicating the stock assessment model (WCSAM approach)">>=
plot(FLStocks(orig=stk, sim=stks, fitsim=stks+sfit))
@

\subsubsection{Parallel computing}

This is an example of how to use the \pkg{parallel} R package to run assessments. In this example each iteration is a dataset, including surveys, and we'll run one assessment for each iteration. Afterwards the data is pulled back together in an \class{FLStock} object and plotted (Figure~\ref{fig:wcsampar}). Only 20 iterations are run to avoid taking too long. Also note that we're using 4 cores. This parameter depends on the computer being used. These days almost all computers have at least 2 cores.

Finally, compare this code with the one for replicating WCSAM and note that it's exactly the same, except that we're using \code{mclapply()} from package \pkg{paralell} instead of \code{lapply()}.

<<>>=
data(ple4)
data(ple4.indices)
nits <- 25
fit <- a4aSCA(ple4, ple4.indices[1]) 
stk <- ple4 + fit
fits <- simulate(fit, nits, 1234)
stks <- ple4 + fits 
idxs <- ple4.indices[1]
index(idxs[[1]]) <- index(fits)[[1]]
library(parallel)
options(mc.cores=3)
lst <- mclapply(split(1:nits, 1:nits), function(x){
	out <- try(a4aSCA(iter(stks, x), FLIndices(iter(idxs[[1]], x)), fit="MP")) 
	if(is(out, "try-error")) NULL else out
})

stks2 <- stks
for(i in 1:nits){
	iter(catch.n(stks2), i) <- catch.n(lst[[i]])
	iter(stock.n(stks2), i) <- stock.n(lst[[i]])
	iter(harvest(stks2), i) <- harvest(lst[[i]])
} 
catch(stks2) <- computeCatch(stks2) 
stock(stks2) <- computeStock(stks2) 
stks3 <- FLStocks(orig=stk, sim=stks, fitsim=stks2)

@

<<wcsampar, echo=FALSE, fig.cap="Replicating the stock assessment model (WCSAM approach) using parallel computing">>=
plot(stks3)
@

%\subsection{Mimicking other stock assessment models- WORK IN PROGRESS}

%Mimicking other stock assessment models is relevant for the implementation of MSEs, when the analyst is interested in comparing the performance of HCRs based on inputs from distinct stock assessment models. 

%\subsubsection{Separable F model}
%<<>>=
%fmodel <- ~factor(age)+factor(year)
%fit <- sca(ple4, ple4.indices, fmodel=fmodel)
%@

%<<sepmod, echo=FALSE, fig.cap="Separable F model">>=
%wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
%@

%\subsubsection{SAM}
%<<>>=
%fmod <- ~ factor(age) + s(year, k=10, by = breakpts(age, c(1.5:8,10))) + factor(age == 10)
%fit <- sca(ple4, ple4.indices, fmod)
%@

%<<sammod, echo=FALSE, fig.cap="SAM type of model">>=
%wireframe(data ~ age + year, data = harvest(fit), drape = TRUE, screen = list(x = -90, y=-45), zlab="F")
%@

\subsection{Model averaging}

To merge results from several fits, using distinct models or datasets, we follow \href{http://icesjms.oxfordjournals.org/content/early/2014/03/31/icesjms.fsu043.abstract}{Millar, et.al, 2014}. The method \code{ma()} is the wrapper to the distinct methods, although for now only the AIC averaging is implemented. Figures~\ref{fig:ssbmodav}~and~\ref{fig:modav} show the results. 

<<>>=
data(ple4)
data(ple4.indices)
f1 <- sca(ple4, ple4.indices, fmodel=~ factor(age) + s(year, k=20), qmodel=list(~ s(age, k = 4), ~ s(age, k = 4), ~ s(age, k = 3)), fit = "assessment")
f2 <- sca(ple4, ple4.indices, fmodel=~ factor(age) + s(year, k=20), qmodel=list(~ s(age, k = 4)+year, ~ s(age, k = 4), ~ s(age, k = 3)), fit = "assessment")
stock.sim <- ma(a4aFitSAs(list(f1=f1, f2=f2)), ple4, AIC, nsim = 100)
stks <- FLStocks(f1=ple4+f1, f2=ple4+f2, ma=stock.sim)
@

<<ssbmodav, echo=FALSE, fig.cap="SSB of the two models and their average">>=
flqs <- lapply(stks, ssb)
flqs <- lapply(flqs, iterMedians)
xyplot(data~year, groups=qname, data=flqs, type="l")
@

<<modav, echo=FALSE, fig.cap="Stock summaries of the two models and their average">>=
plot(stks)
@

\end{document}

